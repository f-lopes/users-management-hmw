openapi: 3.0.1
info:
  title: Users management REST API
  description: Users management REST API
  contact:
    name: Maintainer
    url: www.florianlopes.io
    email: florian.lopes@outlook.com
  version: "1.0"
servers:
  - url: http://localhost:8080/
    description: "local server"
  - url: http://api.localhost/
    description: "development server"
paths:
  /v1/users/:
    post:
      tags:
        - Users
      summary: "Create a User"
      description: "Create a User"
      operationId: "createUser"

      requestBody:
        description: "The user to create"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        201:
          description: "User created"
    get:
      tags:
        - Users
      summary: Retrieve all Users
      description: "Retrieve all Users"
      operationId: "getUsers"
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageOfUser'
  '/v1/users/{id}':
    get:
      tags:
        - Users
      summary: Retrieve a user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
          content: {}
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        firstname:
          type: string
        lastname:
          type: string
      required:
        - "email"
        - "password"
        - "firstName"
        - "lastName"
    Order:
      type: object
      properties:
        property:
          type: string
          description: The property on which the data is sorted
        direction:
          type: string
          description: The sort direction (ASC|DESC)
          example: ASC
          enum:
            - ASC
            - DESC
      description: Sort criteria applied to this request
    PageOfUser:
      type: object
      properties:
        items:
          type: array
          description: List of users
          items:
            $ref: '#/components/schemas/User'
        totalPages:
          type: integer
          description: Total number of available pages
          format: int32
        totalItems:
          type: integer
          description: Total number of available items (potentially split across many pages)
          format: int64
        nbItems:
          type: integer
          description: Number of items in this page
          format: int32
        pageSize:
          type: integer
          description: Number of items per page
          format: int32
        pageNumber:
          type: integer
          description: Number of this page
          format: int32
        sort:
          type: array
          description: Sort criteria applied to this request
          items:
            $ref: '#/components/schemas/Order'
        isFirstPage:
          type: boolean
        isLastPage:
          type: boolean